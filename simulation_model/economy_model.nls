__includes ["macro_economic_model.nls"]

globals[
  government-reserve-of-capital
  total-amount-of-transaction-for-this-tick
  goods-production-of-total-system
]

;;this function puts altogether some code lying in the wrong place in the code
to reset-economy-measurements
  set total-amount-of-transaction-for-this-tick 0
  
  set goods-production-of-total-system 0
  
  ask people [   
    set my-current-income 0
    set my-target-amount-of-capital precision (my-target-amount-of-capital + financial-stability-learning-rate * (my-amount-of-capital - my-target-amount-of-capital) ) 12]
  
  ;;weird, shouldn't people expected to be pain only when they plan on working?
  ;;e.g. lower pay when working from home; or no/less pay when staying at home taking care of a child? (holiday leave)
  ask people [
    if is-working-day-for-me? and member? slice-of-the-day ["afternoon" "evening"] [
      set my-expected-income my-current-income
    ]
  ]
  
  ask gathering-points [set current-profit 0]
end

to run-economic-cycle
  run-macro-economics
  perform-payment-of-fixed-costs
  perform-trades-between-gathering-points
  perform-government-actions
end

to perform-payment-of-fixed-costs
  ask non-essential-shops
  [
    if not is-accessible?
    [
      if (slice-of-the-day = "morning" or slice-of-the-day = "afternoon") and is-working-day-for-me?
      [
        ask hired-workers
        [
          let amount-to-earn workers-wages
          
          let amount-earned min (list amount-to-earn max (list [amount-of-capital] of my-work 0))
          perform-transaction self my-work (list "salary" amount-earned) (list "nothing")
          
          if government-pays-wages?
          [
            if amount-earned < amount-to-earn
            [
              let worker-subsidy ratio-of-wage-paid-by-the-government * (amount-to-earn - amount-earned)
              perform-transaction self "government" (list "subsidy" worker-subsidy) (list "nothing")
            ]
          ]
        ]
      ]
    ]
  ]
end

to perform-trades-between-gathering-points
  
  let total-amount-of-goods-available-in-workplaces sum [stock-of-goods] of gathering-points with [gathering-type = "workplace"]
  let virtual-total-amount-of-goods-available-in-workplaces total-amount-of-goods-available-in-workplaces
  let virtual-total-amount-of-goods-available-in-workplaces-converted-to-capital virtual-total-amount-of-goods-available-in-workplaces * unit-price-of-goods
  let actual-amount-of-stocks-bought 0
  
  ;essential-shop
  let total-capital-available-in-essential-shops-to-buy-goods 0
  ask essential-shops
  [
    let capital-available-to-buy-goods amount-of-capital - max-amount-of-capital-to-retain
    set capital-available-to-buy-goods max (list capital-available-to-buy-goods 0)
    set total-capital-available-in-essential-shops-to-buy-goods total-capital-available-in-essential-shops-to-buy-goods + capital-available-to-buy-goods
  ]
  
  let total-capital-to-be-spent-by-essential-shops min (list total-capital-available-in-essential-shops-to-buy-goods virtual-total-amount-of-goods-available-in-workplaces-converted-to-capital)
  
  if total-capital-to-be-spent-by-essential-shops > 0
  [
    ask essential-shops
    [
      let capital-available-to-buy-goods amount-of-capital - max-amount-of-capital-to-retain
      set capital-available-to-buy-goods max (list capital-available-to-buy-goods 0)
      
      let amount-charged capital-available-to-buy-goods / total-capital-available-in-essential-shops-to-buy-goods * total-capital-to-be-spent-by-essential-shops
      let stock-bought (floor amount-charged / unit-price-of-goods)
      set stock-bought min (list (max-stock-of-goods-in-a-shop - stock-of-goods) stock-bought)
      set amount-charged stock-bought * unit-price-of-goods
      
      set amount-of-capital amount-of-capital - amount-charged
      set current-profit current-profit - amount-charged
      set stock-of-goods stock-of-goods + stock-bought
      set actual-amount-of-stocks-bought actual-amount-of-stocks-bought + stock-bought
    ]
  ]
  
  ;updating "virtual" amount of goods available in workplaces
  set virtual-total-amount-of-goods-available-in-workplaces virtual-total-amount-of-goods-available-in-workplaces - actual-amount-of-stocks-bought
  set virtual-total-amount-of-goods-available-in-workplaces-converted-to-capital virtual-total-amount-of-goods-available-in-workplaces * unit-price-of-goods
  
  ;non-essential-shop
  let total-capital-available-in-non-essential-shops-to-buy-goods 0
  ask non-essential-shops
  [
    let capital-available-to-buy-goods amount-of-capital - max-amount-of-capital-to-retain
    set capital-available-to-buy-goods max (list capital-available-to-buy-goods 0)
    set total-capital-available-in-non-essential-shops-to-buy-goods total-capital-available-in-non-essential-shops-to-buy-goods + capital-available-to-buy-goods
  ]
  
  let total-capital-to-be-spent-by-non-essential-shops min (list total-capital-available-in-non-essential-shops-to-buy-goods virtual-total-amount-of-goods-available-in-workplaces-converted-to-capital)
  
  if total-capital-to-be-spent-by-non-essential-shops > 0
  [
    ask non-essential-shops
    [
      let capital-available-to-buy-goods amount-of-capital - max-amount-of-capital-to-retain
      set capital-available-to-buy-goods max (list capital-available-to-buy-goods 0)
      let amount-charged capital-available-to-buy-goods / total-capital-available-in-non-essential-shops-to-buy-goods * total-capital-to-be-spent-by-non-essential-shops
      
      let stock-bought (floor amount-charged / unit-price-of-goods)
      set stock-bought min (list (max-stock-of-goods-in-a-shop - stock-of-goods) stock-bought)
      set amount-charged stock-bought * unit-price-of-goods
      
      set amount-of-capital amount-of-capital - amount-charged
      set current-profit current-profit - amount-charged
      set stock-of-goods stock-of-goods + stock-bought
      set actual-amount-of-stocks-bought actual-amount-of-stocks-bought + stock-bought
    ]
  ]
  
  ;workplace
  let total-capital-spent-by-all-shops actual-amount-of-stocks-bought * unit-price-of-goods
  set total-amount-of-transaction-for-this-tick total-amount-of-transaction-for-this-tick + total-capital-spent-by-all-shops
  
  if total-capital-spent-by-all-shops > 0
  [
    ask gathering-points with [gathering-type = "workplace"]
    [
      let capital-income stock-of-goods / total-amount-of-goods-available-in-workplaces * total-capital-spent-by-all-shops
      set amount-of-capital amount-of-capital + capital-income
      set current-profit current-profit + capital-income
      set stock-of-goods stock-of-goods - capital-income / unit-price-of-goods
    ]
  ]
end

to-report is-salary-value? [v]
  report first v = "salary"
end

to-report is-work-value? [v]
  report first v = "work"
end

to-report is-purchase-value? [v]
  report first v = "purchase"
end

to-report is-subsidy-value? [v]
  report first v = "subsidy"
end

to-report is-payment-value? [v]
  report first v = "payment"
end

to-report is-tax-value? [v]
  report first v = "tax"
end

to-report is-trade-value? [v]
  report first v = "trade"
end

to-report is-loan-value? [v]
  report first v = "loan"
end

to-report salary-value-from [v]
  report last v
end

to-report is-government? [v]
  report v = "government"
end

to-report is-nothing? [v]
  report first v = "nothing"
end

to increase-capital-by [val]
  
  if is-person? self
  [
    set my-amount-of-capital my-amount-of-capital + val
    set my-current-income my-current-income + val
  ]
  
  if is-gathering-point? self
  [
    set amount-of-capital amount-of-capital + val
    set current-profit current-profit + val
  ]
  
  if is-macro-sector? self
  [
    set amount-of-capital amount-of-capital + val
  ]
  
  if is-central-bank? self
  [
    set reserve-of-capital reserve-of-capital + val
  ]
end

to increase-credit-by [val]
  if is-central-bank? self
  [
    set total-credit total-credit + val
  ]
end

to increase-debt-by [val]
  if is-macro-sector? self
  [
    set debt-with-central-bank debt-with-central-bank + val
  ]
end

to perform-cash-transfer [a1 a2 amount]
  ;from a1 to a2
  
  ifelse is-government? a1
  [
    set government-reserve-of-capital government-reserve-of-capital - amount
    ask a2 [increase-capital-by amount]
  ]
  [
    ifelse is-government? a2
    [
      ask a1 [increase-capital-by (- amount)]
      set government-reserve-of-capital government-reserve-of-capital + amount
    ]
    [
      ask a1 [increase-capital-by (- amount)]
      ask a2 [increase-capital-by amount]
    ]
  ]
  
  set total-amount-of-transaction-for-this-tick total-amount-of-transaction-for-this-tick + abs amount
end

to perform-loan-transfer [a1 a2 amount]
  ;amount > 0: a1 grants a loan, a2 get a loan
  ;amount < 0: a1 receives payment of a debt, a2 pays a debt
  
  ask a1 [increase-capital-by (- amount)]
  ask a2 [increase-capital-by amount]
  
  ask a1 [increase-credit-by amount]
  ask a2 [increase-debt-by amount]
end

to-report is-cash-transfer? [value]
  if value = "work" [report false]
  if is-work-value? value [report false]
  if is-purchase-value? value [report false]
  if is-nothing? value [report false]
  if is-salary-value? value [report true]
  if is-subsidy-value? value [report true]
  if is-payment-value? value [report true]
  if is-tax-value? value [report true]
  if is-trade-value? value [report true]
  if is-loan-value? value [report false]
  error (sentence "unimplemented for:" value)
end

to-report cash-value-of [v]
  report last v
end

to-report purchase-amount-of [v]
  report last v
end

to-report loan-value-of [v]
  report last v
end

to perform-transaction [a1 a2 value-a2-to-a1 value-a1-to-a2]

  let a2-to-a1-completed? false
  let a1-to-a2-completed? false
  
  if is-cash-transfer? value-a1-to-a2
  [
    perform-cash-transfer a1 a2 (cash-value-of value-a1-to-a2)
    set a1-to-a2-completed? true
  ]
  
  if is-cash-transfer? value-a2-to-a1
  [
    perform-cash-transfer a2 a1 (cash-value-of value-a2-to-a1)
    set a2-to-a1-completed? true
  ]
  
  ;;work performance could be related to another part of the model; but let's save it here for now & simplicity
  if is-work-value? value-a1-to-a2
  [
    if is-person? a1 and is-gathering-point? a2
    [
      if [is-workplace?] of a2
      [
        let goods-produced goods-produced-by-work-performed
        
        if [is-at-home?] of a1
        [
          set goods-produced goods-produced * productivity-at-home
        ]
        
        ask a2 [set stock-of-goods stock-of-goods + goods-produced]
        set goods-production-of-total-system goods-production-of-total-system + goods-produced
      ]
      set a1-to-a2-completed? true
    ]
  ]
  
  if is-work-value? value-a2-to-a1
  [
    if is-person? a2 and is-gathering-point? a1
    [
      if [is-workplace?] of a1
      [
        let goods-produced goods-produced-by-work-performed
        
        if [is-at-home?] of a2
        [
          set goods-produced goods-produced * productivity-at-home
        ]
        
        ask a1 [set stock-of-goods stock-of-goods + goods-produced]
        set goods-production-of-total-system goods-production-of-total-system + goods-produced
      ]
      set a2-to-a1-completed? true
    ]
  ]
  
  if is-purchase-value? value-a1-to-a2
  [
    let purchase-amount purchase-amount-of value-a1-to-a2
    if is-person? a2 and is-gathering-point? a1
    [
      ask a1 [set stock-of-goods stock-of-goods - purchase-amount]
      if [is-essential-shop?] of a1
      [
        ask a2 [ask my-home [set available-food-rations available-food-rations + purchase-amount]]
      ]
      set a1-to-a2-completed? true
    ]
  ]
  
  if is-purchase-value? value-a2-to-a1
  [
    let purchase-amount purchase-amount-of value-a2-to-a1
    if is-person? a1 and is-gathering-point? a2
    [
      ask a2 [set stock-of-goods stock-of-goods - purchase-amount]
      if [is-essential-shop?] of a2
      [
        ask a1 [ask my-home [set available-food-rations available-food-rations + purchase-amount]]
      ]
      set a2-to-a1-completed? true
    ]
  ]
  
  if is-loan-value? value-a1-to-a2
  [
    perform-loan-transfer a1 a2 (loan-value-of value-a1-to-a2)
    set a1-to-a2-completed? true
  ]
  
  if is-loan-value? value-a2-to-a1
  [
    perform-loan-transfer a2 a1 (loan-value-of value-a2-to-a1)
    set a2-to-a1-completed? true
  ]
  
  if is-nothing? value-a1-to-a2 [set a1-to-a2-completed? true]
  if is-nothing? value-a2-to-a1 [set a2-to-a1-completed? true]
  
  if a1-to-a2-completed? and a2-to-a1-completed? [stop]
  
  if is-gathering-point? a2 [show [gathering-type] of a2]
  error (sentence "not implemented" a1 a2 value-a2-to-a1 value-a1-to-a2)
end

to perform-government-actions
  ;collect taxes
  let taxes-collected 0

  ask essential-shops
  [
    if current-profit > 0
    [
      let tax-amount current-profit * ratio-tax-on-essential-shops
      set taxes-collected taxes-collected + tax-amount
      perform-transaction "government" self (list "tax" tax-amount) (list "nothing")
    ]
  ]

  ask non-essential-shops
  [
    if current-profit > 0
    [
      let tax-amount current-profit * ratio-tax-on-non-essential-shops
      set taxes-collected taxes-collected + tax-amount
      perform-transaction "government" self (list "tax" tax-amount) (list "nothing")
    ]
  ]

  ask gathering-points with [gathering-type = "workplace"]
  [
    if current-profit > 0
    [
      let tax-amount current-profit * ratio-tax-on-workplaces
      set taxes-collected taxes-collected + tax-amount
      perform-transaction "government" self (list "tax" tax-amount) (list "nothing")
    ]
  ]
  
  ask gathering-points with [gathering-type = "shared-cars"]
  [
    if current-profit > 0
    [
      let tax-amount current-profit * ratio-tax-on-shared-cars
      set taxes-collected taxes-collected + tax-amount
      perform-transaction "government" self (list "tax" tax-amount) (list "nothing")
    ]
  ]

  ask people with [age = "worker"]
  [
    if my-current-income > 0
    [
      let tax-amount my-current-income * ratio-tax-on-workers
      set taxes-collected taxes-collected + tax-amount
      perform-transaction "government" self (list "tax" tax-amount) (list "nothing")
    ]
  ]

  ;redistribution
  let school-subsidy taxes-collected * ratio-school-subsidy
  let hospital-subsidy taxes-collected * ratio-hospital-subsidy
  let university-subsidy taxes-collected * ratio-university-subsidy
  let retirees-subsidy taxes-collected * ratio-retirees-subsidy
  let students-subsidy taxes-collected * ratio-students-subsidy
  let parents-subsidy taxes-collected * ratio-parents-subsidy
  let public-transport-subsidy taxes-collected * ratio-public-transport-subsidy
  
  let n-of-schools count gathering-points with [gathering-type = "school"]
  ask gathering-points with [gathering-type = "school"]
  [
    let subsidy school-subsidy / n-of-schools
    perform-transaction self "government" (list "subsidy" subsidy) (list "nothing")
  ]

  let n-of-hospitals count gathering-points with [gathering-type = "hospital"]
  ask gathering-points with [gathering-type = "hospital"]
  [
    let subsidy hospital-subsidy / n-of-hospitals
    perform-transaction self "government" (list "subsidy" subsidy) (list "nothing")
  ]

  let n-of-universities count gathering-points with [gathering-type = "university"]
  ask gathering-points with [gathering-type = "university"]
  [
    let subsidy university-subsidy / n-of-universities
    perform-transaction self "government" (list "subsidy" subsidy) (list "nothing")
  ]
  
  let n-of-public-transport count gathering-points with [gathering-type = "public-transport"]
  ask gathering-points with [gathering-type = "public-transport"]
  [
    let subsidy public-transport-subsidy / n-of-public-transport
    perform-transaction self "government" (list "subsidy" subsidy) (list "nothing")
  ]

  let n-of-retirees count people with [age = "retired"]
  ask people with [age = "retired"]
  [
    let subsidy retirees-subsidy / n-of-retirees
    perform-transaction self "government" (list "subsidy" subsidy) (list "nothing")
  ]

  let n-of-students count people with [age = "student"]
  ask people with [age = "student"]
  [
    let subsidy students-subsidy / n-of-students
    perform-transaction self "government" (list "subsidy" subsidy) (list "nothing")
  ]
  
  ;parents subsidy
  let n-of-children count people with [age = "young"]
  ask people with [age = "young"]
  [
    let subsidy parents-subsidy / n-of-children
    let n-of-my-parents count my-relatives with [age = "worker"]
    set subsidy subsidy / n-of-my-parents
    ask my-relatives with [age = "worker"]
    [
      perform-transaction self "government" (list "subsidy" subsidy) (list "nothing")
    ]
  ]
end

to-report #adult-people-out-of-capital
  report count people with [age != "young" and my-amount-of-capital <= 0]
end

to-report #retired-out-of-capital
  report count people with [age = "retired" and my-amount-of-capital <= 0]
end

to-report #workers-out-of-capital
  report count people with [age = "worker" and my-amount-of-capital <= 0]
end

to-report #students-out-of-capital
  report count people with [age = "student" and my-amount-of-capital <= 0]
end

to-report #essential-shops-out-of-capital
  report count gathering-points with [gathering-type = "essential-shop" and amount-of-capital <= 0]
end

to-report #non-essential-shops-out-of-capital
  report count gathering-points with [gathering-type = "non-essential-shop" and amount-of-capital <= 0]
end

to-report #universities-out-of-capital
  report count gathering-points with [gathering-type = "university" and amount-of-capital <= 0]
end

to-report #hospitals-out-of-capital
  report count gathering-points with [gathering-type = "hospital" and amount-of-capital <= 0]
end

to-report #workplaces-out-of-capital
  report count gathering-points with [gathering-type = "workplace" and amount-of-capital <= 0]
end

to-report #schools-out-of-capital
  report count gathering-points with [gathering-type = "school" and amount-of-capital <= 0]
end

to-report #public-transport-out-of-capital
  report count gathering-points with [gathering-type = "public-transport" and amount-of-capital <= 0]
end

to-report #shared-cars-out-of-capital
  report count gathering-points with [gathering-type = "shared-cars" and amount-of-capital <= 0]
end

to-report velocity-of-money-in-total-system
  report total-amount-of-transaction-for-this-tick / total-amount-of-capital-in-the-system
end

to-report is-in-poverty?
  report price-of-rations-in-essential-shops * days-of-rations-bought > my-amount-of-capital
end
