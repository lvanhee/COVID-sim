__includes ["people_decision.nls" "people_activity.nls" "people_age_model.nls" "disease_model.nls" "epistemic_model.nls" "social_networks.nls"]
globals [
  #min-workers-in-adults-homes
  #min-students-in-adults-homes
  #min-retirees-in-retired-couple-homes
  #min-workers-in-family-homes
  #min-students-in-family-homes
  #min-young-in-family-homes
  #min-workers-in-multi-generational-homes
  #min-students-in-multi-generational-homes
  #min-young-in-multi-generational-homes
  #min-retirees-in-multi-generational-homes
  
  distribution-control-variable
]

people-own [
  age
  infection-status
  epistemic-infection-status
  current-activity
  is-moving-outside-for-reaching-current-activity?
  current-motivation
  last-day-observed-symptoms
  has-done-shopping
  purpose-of-the-current-gathering
  ;set-default-shape turtles "circle"

  ;;the disease profile records how the person will react to the disease
  disease-profile
  duration-current-disease-status
  
  current-person-I-depend-on

  ;;this variable indicates whether the carrier can effectively be cured or whether he/she is too weak and will die anyway if sick
  ;;if data shows high difference, it might to be expanded at a later time for finer granularity (i.e. "can-be-cured-if-cured-early?" and "can-be-cured-if-cured-late?")
  can-be-cured?


  ;"needs" are a central driver in decision-making (e.g. eating, belonging to groups, physical security).
  ;"needs" are a relevant concept for accounting for the reasons that can push an agent for violating guidelines, in spite of generally complying to them
  ;"needs" can be seen as criteria that agents tend to satisfy.
  ;As a criteria, each need can be related to a level of satisfaction
  ;Each need is related to a prevalence, i.e. how much this need is "active" or is "bothering agent decision".
  ;The less a need is currently satisfied, the more prevalent it becomes (comparatively to other times when the same need has been satisfied); i.e. prevalence is monotonous wrt need satisfaction
  ;Each need is related to a specific prevalence measure: certain needs can become suddently very critical while the criticality of others is more smooth
  ;Likewise, a relative ordering exists within needs/prevalence (e.g. a person both hungry and lonely is likely to eat alone whereas a mildly-fed lonely person is more likely to share).

  ;Agents tend to act towards satisfying the most pressing needs first;
  ;satisfying needs tends to require active engagement and satisfied needs tend to be less cognitively important for the agent

  ;Various needs have a relative *prevalence* for the agent (e.g. eating is less relatively important than breathing), which then affect how much the agent will aim to satisfy this need when acting
  ;Agents assign different priorities for their needs, this priority order is culturally-sensitive and can thus shape collective responses

  ;For follow-up coders:
  ;More needs can and should be added as one sees fit
  ;Here, I rely on very simplified [0,1] variables for memorizing when was the need satisfied for the last time and making the maths easy.
  ;Though, in principle, needs are shaped by the history of the agent rather than "regularly growing" and thus more advanced representations are advised --if needed.
  ;For instance, a "food-security" need should be much more prevalent if the agent experienced forced hunger due to a shortage

  ;Currently, the need level and the prevalence are weighted and scaled within [0,1], where 1 means "the most prevalent ever" and "the least satisfied ever".
  ;Keeping the scale is very important for conceptual coherence.

  ;Regarding assumptions/scale, my gut feeling (to be checked against theory) is that available plans and need prevalence should evolve over time when the agent faces new situations
  ;Notably, new plans for satisfying should be learnable by agents (e.g. satisfying physical-activity needs might need some adaptation when locked in)
  ;and traumatic events or long-term deprivation should affect the need structure (e.g. food deprivation should dramatically bump up the prevalence of food safety, thus causing rush to supermarkets for instance)

  ;;need-related aspects
  ;note that these terminal variables could/should eventually end-up as functions based on more specific needs
  ;here are two needs for the sake of illustration
  ;checkout the list of universal human needs for more ideas
  ;these are two needs from Maslow
  belonging-need-satisfaction
  my-importance-for-belonging-needs
  ; safety-need-satisfaction is a reporter
  my-importance-for-safety-needs
  relaxing-need-satisfaction
  my-importance-for-relaxing-needs
  autonomy-need-satisfaction
  my-importance-for-autonomy-needs
  ; Variables for belonging needs
  days-since-seen-relatives
  days-since-seen-colleagues
  days-since-seen-friends
  ; Subneeds of safety
  compliance-need-satisfaction
  my-importance-for-compliance-needs
  my-importance-for-survival-needs ; survival-need-satisfaction is a reporter
  risk-avoidance-need-satisfaction
  my-importance-for-risk-avoidance-needs
  
  my-amount-of-resources
  my-current-income
]


;;it may that at some point we turn homes as a special breed of turtle that (bidirectionally) relates to a gathering point
to setup-person-home

  let h nobody
  if household-composition = "balanced-mix"
  [
    set h min-one-of homes [count gatherers with [age = [age] of [myself] of myself]]
  ]
  if household-composition = "segregated-elderly"
  [
    let quota-of-homes-of-retired floor (#homes * #retired / #people )
    let quota-of-homes-for-non-retired floor (#homes - quota-of-homes-of-retired)
    
    ifelse is-retired?
    [
      ifelse count houses-hosting-retired < quota-of-homes-of-retired
      [
        set h one-of homes with [not any? gatherers]
      ]
      [
        set h one-of houses-only-hosting-retired with-min [count gatherers]
      ]
    ]
    [
      let filled-houses-for-non-retired homes with [any? gatherers and not any? gatherers with [is-retired?]]
      ifelse count filled-houses-for-non-retired < quota-of-homes-for-non-retired
      [set h one-of homes with [not any? gatherers]]
      [set h one-of filled-houses-for-non-retired with-min [count gatherers]]
    ]
  ]
  if household-composition = "different-kinds"
  [
    if age = "retired"
    [
      ifelse #min-retirees-in-retired-couple-homes > 0
      [
        ifelse any? homes with [count gatherers = 1 and any? gatherers with [age = "retired"]]
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "retired"]]
        ]
        [
          set h one-of empty-houses
        ]
        
        set #min-retirees-in-retired-couple-homes #min-retirees-in-retired-couple-homes - 1
      ]
      [
        ifelse #min-retirees-in-multi-generational-homes > 0
        [
          set h one-of empty-houses
          
          set #min-retirees-in-multi-generational-homes #min-retirees-in-multi-generational-homes - 1
        ]
        [
          ;extra retirees
          set h one-of houses-hosting-multiple-generations
        ]
      ]
    ]
    
    if age = "worker"
    [
      ifelse #min-workers-in-adults-homes > 0
      [
        ifelse any? homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]
        ]
        [
          set h one-of empty-houses
        ]
        
        set #min-workers-in-adults-homes #min-workers-in-adults-homes - 1
      ]
      [
        ifelse #min-workers-in-multi-generational-homes > 0
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "retired"]]
          
          set #min-workers-in-multi-generational-homes #min-workers-in-multi-generational-homes - 1
        ]
        [
          ifelse #min-workers-in-family-homes > 0
          [
            set h one-of empty-houses
            
            set #min-workers-in-family-homes #min-workers-in-family-homes - 1
          ]
          [
            ;extra workers
            set h one-of homes with [any? gatherers with [age = "worker"]]
          ]
        ]
      ]
    ]
    
    if age = "student"
    [
      ifelse #min-students-in-adults-homes > 0
      [
        ifelse any? homes with [count gatherers = 1 and any? gatherers with [age = "student"]]
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "student"]]
        ]
        [
          set h one-of empty-houses
        ]
        
        set #min-students-in-adults-homes #min-students-in-adults-homes - 1
      ]
      [
        ifelse #min-students-in-multi-generational-homes > 0
        [
          set h one-of homes with [count gatherers = 2 and any? gatherers with [age = "worker"] and any? gatherers with [age = "retired"]]
          
          set #min-students-in-multi-generational-homes #min-students-in-multi-generational-homes - 1
        ]
        [
          ifelse #min-students-in-family-homes > 0
          [
            set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]
            
            set #min-students-in-family-homes #min-students-in-family-homes - 1
          ]
          [
            ;extra students
            set h one-of homes with [any? gatherers with [age = "student"] or any? gatherers with [age = "young"]]
          ]
        ]
      ]
    ]
    
    if age = "young"
    [
      ifelse #min-young-in-family-homes > 0
      [
        set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]
        
        set #min-young-in-family-homes #min-young-in-family-homes - 1
      ]
      [
        ifelse #min-young-in-multi-generational-homes > 0
        [
          set h one-of homes with [count gatherers = 2 and any? gatherers with [age = "worker"] and any? gatherers with [age = "retired"]]
          
          set #min-young-in-multi-generational-homes #min-young-in-multi-generational-homes - 1
        ]
        [
          ;extra young
          set h one-of homes with [any? gatherers with [age = "worker"] and any? gatherers with [age != "worker"]]
        ]
      ]
    ]
  ]

  if h = nobody [error (word "unimplemented for: " age " " self)]

  create-gathering-link-to h
  [
    set commitment 1
    set features (list "rest" "visit family")
  ]
end



to setup-person
  set my-amount-of-resources 30
  
  setup-person-age

  setup-disease-profile
  
  set is-moving-outside-for-reaching-current-activity? false
  ;setup-person-home
  

  relate-person-to-gathering-points

  set current-person-I-depend-on nobody
  set color default-color
  set size 0.5
  set infection-status "healthy"
  set epistemic-infection-status "healthy"
  set last-day-observed-symptoms nobody ;should raise an error if used before being initialized
  set has-done-shopping false



  set belonging-need-satisfaction random-float 0.5 + 0.5
  set compliance-need-satisfaction random-float 0.5 + 0.5
  set relaxing-need-satisfaction random-float 0.3 + 0.7
  set risk-avoidance-need-satisfaction random-float 0.5 + 0.5
  set autonomy-need-satisfaction 0.95
  ;the importance levels for each community need should add up to 1
  set my-importance-for-belonging-needs ratio-safety-belonging
  set my-importance-for-safety-needs 1 - ratio-safety-belonging
  set my-importance-for-compliance-needs importance-compliance
  set my-importance-for-survival-needs importance-survival
  set my-importance-for-relaxing-needs importance-leisure
  set my-importance-for-risk-avoidance-needs importance-risk-avoidance
  set my-importance-for-autonomy-needs importance-autonomy
end

to update-people-epistemic-status
  ask people [update-epistemic-status]
end

to-report default-color
  if age-model = "young-old"
  [
    ifelse age = "young" [report green]
    [report blue]
  ]

  if age-model = "young,student,worker,retired"
  [
    if age = "young" [report green]
    if age = "student" [report orange]
    if age = "worker" [report blue]
    if age = "retired" [report red]
  ]
  error "not implemented"
end

to update-people-display
  set color default-color
  if infection-status = "healthy"
  [set color color + 2]
  if infection-status = "infected"
  [set color color ]
  if infection-status = "dead"
  [set color color - 2]
  if infection-status = "immune"
  [set color white]

end

to set-infection-status [infection]
  set infection-status infection
end

to create-all-people
  if household-composition = "different-kinds"
  [
    set households-distribution? true
  ]
  
  if households-distribution?
  [
    set household-composition "different-kinds"
    
    let #adults-homes floor (#homes * ratio-adults-homes)
    let #retired-couple-homes floor (#homes * ratio-retired-couple-homes)
    let #family-homes floor (#homes * ratio-family-homes)
    let #multi-generational-homes #homes - (#adults-homes + #retired-couple-homes + #family-homes)
    
    let #min-people #adults-homes * 2 + #retired-couple-homes * 2 + #family-homes * 2 + #multi-generational-homes * 3
    
    ;initializing local variables
    let #extra-retirees 0
    let #extra-young 0
    let #extra-students 0
    let #extra-workers 0
    
    ifelse #min-people <= #total-population
    [
      set #min-workers-in-adults-homes (floor (#adults-homes / 2)) * 2 ;to ensure that adults-homes have either 2 workers or 2 students (not both)
      set #min-students-in-adults-homes #adults-homes * 2 - #min-workers-in-adults-homes
      set #min-retirees-in-retired-couple-homes #retired-couple-homes * 2
      set #min-workers-in-family-homes #family-homes
      set #min-students-in-family-homes floor (#family-homes / 2)
      set #min-young-in-family-homes #family-homes - #min-students-in-family-homes
      set #min-workers-in-multi-generational-homes #multi-generational-homes
      set #min-students-in-multi-generational-homes floor (#multi-generational-homes / 2)
      set #min-young-in-multi-generational-homes #multi-generational-homes - #min-students-in-multi-generational-homes
      set #min-retirees-in-multi-generational-homes #multi-generational-homes
      
      let #extra-people #total-population - #min-people
      
      if #extra-people > 0
      [
        ;#extra-retirees
        if #multi-generational-homes > 0
        [
          set #extra-retirees floor (#extra-people * 1 / 10)
        ]
        
        ;#extra-young
        if #family-homes + #multi-generational-homes > 0
        [
          set #extra-young floor (#extra-people * 3 / 10)
        ]
        
        ;#extra-students and #extra-workers
        ifelse #adults-homes + #family-homes + #multi-generational-homes > 0
        [
          set #extra-students floor (#extra-people * 2 / 10)
          set #extra-workers #extra-people - (#extra-retirees + #extra-young + #extra-students)
        ]
        [
          error "Once there are only homes for retired couples, total population should be exactly twice the number of homes"
        ]
      ]
    ]
    [
      error word "#total-population should be at least " #min-people
    ]
    
    set #young #min-young-in-family-homes + #min-young-in-multi-generational-homes + #extra-young
    set #students #min-students-in-adults-homes + #min-students-in-family-homes + #min-students-in-multi-generational-homes + #extra-students
    set #workers #min-workers-in-adults-homes + #min-workers-in-family-homes + #min-workers-in-multi-generational-homes + #extra-workers
    set #retired #min-retirees-in-retired-couple-homes + #min-retirees-in-multi-generational-homes + #extra-retirees
  ]
  
  if original-distribution = "one-person-per-patch"
  [ask patches [sprout-people 1 [setup-person]]]
  if original-distribution = "set-by-quotas"
  [create-people #young + #students + #workers + #retired [setup-person]]
  setup-people-homes
  

  ask people [ set current-activity one-of link-neighbors with  [gathering-type = "home"]]
end

to relate-person-to-gathering-points

  create-gathering-link-to one-of gathering-points with [gathering-type = "hospital"]
  [
    set commitment 1
    set features (list "get-tested" "get-treatment")
  ]
  ifelse activity-model = "public&private leisure, rest, age-based work" and age-model = "young,student,worker,retired"
  [
    create-gathering-link-to one-of gathering-points with [gathering-type = "private-leisure"]
    [ set commitment 1 set features (list "relaxing")]
    create-gathering-link-to one-of gathering-points with [gathering-type = "public-leisure"]
    [ set commitment 1 set features (list "relaxing")]
    create-gathering-links-to n-of (ceiling #essential-shops * 0.2) gathering-points with [gathering-type = "essential-shop"]
    [ set commitment 1 set features (list "essential shopping" "shopping")]
    create-gathering-links-to n-of (ceiling #non-essential-shops * 0.4) gathering-points with [gathering-type = "non-essential-shop"]
    [ set commitment 1 set features (list "relaxing" "shopping")]

    if age = "young" [ create-gathering-link-to one-of gathering-points with [gathering-type = "school"]
      [ set commitment 1
        set features (list "mandatory")]
    ]

    if age = "student" [ create-gathering-link-to one-of gathering-points with [gathering-type = "university"]
      [ set commitment 1 set features (list "learning")]]

    if age = "worker" [
      if random-float 1 < probability-hospital-personel [
        ask one-of my-out-gathering-links with [[gathering-type] of other-end = "hospital"] [
          set features (lput "contractual obligation" (lput "getting money" features))
        ]
        stop
      ]
      if random-float 1 < probability-school-personel [
        create-gathering-link-to one-of gathering-points with [gathering-type = "school"]
        [ set commitment 1
          set features (list "getting money" "contractual obligation")
        ]
        stop
      ]
      if random-float 1 < probability-university-personel [
        create-gathering-link-to one-of gathering-points with [gathering-type = "university"]
        [ set commitment 1
          set features (list "getting money" "contractual obligation")
        ]
        stop
      ]
      if random-float 1 < probability-shopkeeper [
        ask one-of my-out-gathering-links with [member? "shopping" features] [
          set features (lput "contractual obligation" (lput "getting money" features))
        ]
        stop
      ]
      create-gathering-link-to one-of gathering-points with [gathering-type = "workplace"]
      [ set commitment 1 set features (list "getting money" "contractual obligation")]
    ]
  ]
  [error "not implemented"]
end

to setup-people-homes
  if household-composition = "balanced-mix" or household-composition = "segregated-elderly"
  [
    ask people [setup-person-home]
  ]
  if household-composition = "different-kinds"
  [
    ask n-of #min-retirees-in-retired-couple-homes homeless-people with [age = "retired"]
    [
      setup-person-home
    ]
    
    ask n-of #min-retirees-in-multi-generational-homes homeless-people with [age = "retired"]
    [
      setup-person-home
    ]
    
    ask n-of #min-workers-in-adults-homes homeless-people with [age = "worker"]
    [
      setup-person-home
    ]
    
    ask n-of #min-workers-in-multi-generational-homes homeless-people with [age = "worker"]
    [
      setup-person-home
    ]
    
    ask n-of #min-workers-in-family-homes homeless-people with [age = "worker"]
    [
      setup-person-home
    ]
    
    ask n-of #min-students-in-adults-homes homeless-people with [age = "student"]
    [
      setup-person-home
    ]
    
    ask n-of #min-students-in-multi-generational-homes homeless-people with [age = "student"]
    [
      setup-person-home
    ]
    
    ask n-of #min-students-in-family-homes homeless-people with [age = "student"]
    [
      setup-person-home
    ]
    
    ask n-of #min-young-in-family-homes homeless-people with [age = "young"]
    [
      setup-person-home
    ]
    
    ask n-of #min-young-in-multi-generational-homes homeless-people with [age = "young"]
    [
      setup-person-home
    ]
    
    ask homeless-people
    [
      setup-person-home
    ]
  ]
end


to-report homeless-people
  report people with [not any? out-link-neighbors with [gathering-type = "home"]]
end
to-report children
  report people with [is-young?]
end

to-report is-young?
  report age = "young"
end 

to-report total-amount-of-resources
  report sum [my-amount-of-resources] of people
end

to-report retirees-average-amount-of-resources
  report (sum [my-amount-of-resources] of people with [age = "retired"]) / (count people with [age = "retired"])
end

to-report workers-average-amount-of-resources
  report (sum [my-amount-of-resources] of people with [age = "worker"]) / (count people with [age = "worker"])
end

to-report students-average-amount-of-resources
  report (sum [my-amount-of-resources] of people with [age = "student"]) / (count people with [age = "student"])
end

to-report young-average-amount-of-resources
  report (sum [my-amount-of-resources] of people with [age = "young"]) / (count people with [age = "young"])
end